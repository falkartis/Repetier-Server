The server is written in C/C++ using the boost libraries for highest portability.
It is tested under MacOS 10.8 / Raspberry PI / Windows VS 2008 but different OSes
should work as well. For makefile creation the platform independent CMake is used.

Linux / Raspberry Pi walkthrough

Info for Raspberry PI users with 256MB: The software will not compile due to your memory
      limit. Please use a precompiled version for the pi instead. You will find all
      binaries on http://www.repetier.com in the download section for Repetier-Server.

Installing required software:

I assume a fresh Wheezy image on a raspberry pi. On other linux systems you might also
need to install gcc, make and other development tools.

sudo apt-get install cmake
sudo apt-get install libboost-all-dev
sudo apt-get install git

Get latest version from Github for the first time:
> git clone git://github.com/repetier/Repetier-Server.git
for later updates you only need to issue
> git pull
inside the Repetier-Server directory to update to newest sources.

Compilation using CMake

Inside the toplevel directory downloaded create a directory build
> cd Repetier-Server
> mkdir build
  
Go to build directory
	cd build
	
Create make system for default system compiler:
>	cmake ..

Compile sources:
> make

If you are running this command on a pi it will take a while (up to 30 min).

After cmake finishes with succes your build system is ready. On a Linux system
you now have the RepetierServer executable. On other systems you might have trouble
finding the boost libraries. Edit the toplevel CMakeLists.txt and add the directories
for your computer and retry.

=== Configure Runtime Environment ===

Copy executable to /usr/bin
> sudo cp RepetierServer /usr/bin

Copy a sample config file to /etc
> sudo cp ../linux/repetier-server.conf /etc

Create a environment where the server can store it's data and printer configs.
> sudo mkdir /var/lib/Repetier-Server /var/lib/Repetier-Server/configs /var/lib/Repetier-Server/www /var/lib/Repetier-Server/storage /var/lib/Repetier-Server/languages

Copy the content of www and languages to the created directories
> sudo cp -r ../www/* /var/lib/Repetier-Server/www
> sudo cp ../languages/* /var/lib/Repetier-Server/languages

Create a start init script to run the server as daemon upon boot time.
> sudo cp ../linux/init_Repetier-Server_debian /etc/init.d/Repetier-Server
> sudo chmod 755 /etc/init.d/Repetier-Server

Activate start script:
> sudo update-rc.d Repetier-Server defaults

Now your start script is active on next reboot. To start/stop manually use
> sudo /etc/init.d/Repetier-Server start
> sudo /etc/init.d/Repetier-Server stop

Troubleshooting:

If you have problems check the syslog or start the server directly without the --daemon
parameter to see the error output.

Some people had problems with the boost::filesystem library used. If you get errors like:
#	terminate called after throwing an instance of 'std::runtime_error'
# what(): locale::facet::_S_create_c_locale name not valid
You need to set the locale like this:
> export LC_ALL=C
The init script already contains this command, so this is only an issue if you are
running the server manually.

Connection speed in linux not supported:
I have used some tricks to allow non ansi baud rates. But these are not supported in a 
straight manner by linux. It is more that I manually change some internal settings. For
some printer this works and for some not. So if 250000 baud does not work try 115200.

================== OS Dependent hints =====================

=== Linux ====

The device name /dev/ttyUSBxx may change depending on the order the printer is enabled.
Use instead the /dev/serial/by-id name like this for a device:
/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A800f4AP-if00-port0
At least if you always use the save ports/hub ports. Or create a mapping to a individual
name with udevadm.

=== Windows ===

Compile with Visual Studio 2008:
> cmake -G "Visual Studio 9 2008" ..
Compile with Visual Studio 2010:
> cmake -G "Visual Studio 10" ..

=== MacOS ===

How to get boost:
Install macports from http://www.macports.org/install.php
Install boost library: sudo port install boost

or compile boost yourself

> ./bjam toolset=darwin address-model=32_64 architecture=x86

============== CMake hints ===================

Make a debug build:
cmake "-DCMAKE_BUILD_TYPE:STRING=Debug" ..
